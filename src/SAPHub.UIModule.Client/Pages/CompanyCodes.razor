@page "/companycodes"
@using SAPHub.UI.Shared
@inject ApiClient Http

<h1>Company Codes</h1>

<p>This component demonstrates fetching data from the connected SAP system.</p>


@if (_error != null)
{
    <p><em>Oh, no, something went really wrong. Maybe we have a technical problem here.</em></p>
    <p><em>Error: @_error</em></p>
}

@if (_result == null)
{
    switch (_status)
    {
        case OperationStatus.Queued:
            <p><em>Your request has been queued, please wait a moment...</em></p>
            break;
        case OperationStatus.Running:
            <p><em>Your request is currently processed, please stand by!</em></p>
            break;
        case OperationStatus.Failed:
            <p><em>Oh, no, something went wrong.</em></p>
            break;
        case OperationStatus.Completed:
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
    
}
else
{
    if (_result.OperationStatus == OperationStatus.Completed)
    {
        <p><em>This is the list of all company codes defined in the SAP system:</em></p>


        <table class="table">
            <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var company in _result.Result)
            {
                <tr>
                    <td>@company.Code</td>
                    <td>@company.Name</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p><em>Oh, no, something went wrong.</em></p>
        <p><em>Maybe that message helps: @_result.Message</em></p>
       
    }

}

@code {
    private OperationResult<Company> _result;
    private OperationStatus _status;
    private string _error;
    private int _waits;

    /// <summary>
    /// This method queries for company codes and then is polling for status updates.
    /// A improved version could also use SignalR instead of polling.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var operation = await Http.GetCompanyCodes();
        _status = operation.Status;
        
        try
        {
            while (operation.Status == OperationStatus.Queued || operation.Status == OperationStatus.Running)
            {
                _status = operation.Status;
                await Task.Delay(1000);
                _waits++;
                StateHasChanged();
                operation = await Http.GetOperation(operation.Id);
            }

            _result = await Http.GetCompanyCodesResult(operation.Id);
        }
        catch (Exception ex)
        {
            _error = ex.ToString();

        }

    }



}
